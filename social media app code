#include <iostream>
#include <map>
#include <set>
#include <vector>
#include <string>
#include <ctime>

using namespace std;

class Message {
public:
    string sender;
    string receiver;
    string content;
    time_t timestamp;

    Message() {}

    Message(string sender, string receiver, string content) {
        this->sender = sender;
        this->receiver = receiver;
        this->content = content;
        this->timestamp = time(nullptr);
    }

    void displayMessage() {
        cout << sender << " to " << receiver << " at " << ctime(&timestamp) << ": " << content << endl;
    }
};

class SocialGroup {
    string groupName;
    vector<pair<string, string>> messages;
    vector<string> members;

public:
    SocialGroup() {}

    SocialGroup(string groupName) {
        this->groupName = groupName;
    }

    void addMember(string userName) {
        members.push_back(userName);
    }

    void addMessage(string userName, string content) {
        messages.push_back({userName, content});
    }

    void displayMessages() {
        for (auto& msg : messages) {
            cout << msg.first << ": " << msg.second << endl;
        }
    }
};

class User {
public:
    string firstName;
    string lastName;
    int age;
    string gender;

    User() {}

    User(string firstName, string lastName, int age, string gender) {
        this->firstName = firstName;
        this->lastName = lastName;
        this->age = age;
        this->gender = gender;
    }
};

map<string, User> mapUserName;
map<string, set<string>> Friends;
map<string, vector<Message>> userMessages;
map<string, SocialGroup> groupMap;

void addUser(string userName, User user) {
    if (mapUserName.find(userName) == mapUserName.end()) {
        mapUserName[userName] = user;
    } else {
        cout << "Username already taken" << endl;
    }
}

void makeThemFriend(string userName1, string userName2) {
    if (mapUserName.find(userName1) != mapUserName.end() && mapUserName.find(userName2) != mapUserName.end()) {
        Friends[userName1].insert(userName2);
        Friends[userName2].insert(userName1);
    } else {
        cout << "One or both users do not exist" << endl;
    }
}

void sendMessage(string sender, string receiver, string content) {
    if (mapUserName.find(sender) != mapUserName.end() && mapUserName.find(receiver) != mapUserName.end()) {
        Message msg(sender, receiver, content);
        userMessages[receiver].push_back(msg);
        msg.displayMessage();
    } else {
        cout << "One or both users do not exist" << endl;
    }
}

void createGroup(string groupName) {
    if (groupMap.find(groupName) == groupMap.end()) {
        SocialGroup group(groupName);
        groupMap[groupName] = group;
        cout << "Group " << groupName << " created.\n";
    } else {
        cout << "Group name already taken.\n";
    }
}

void addMemberToGroup(string groupName, string userName) {
    if (groupMap.find(groupName) != groupMap.end() && mapUserName.find(userName) != mapUserName.end()) {
        groupMap[groupName].addMember(userName);
        cout << "Member " << userName << " added to group " << groupName << ".\n";
    } else {
        cout << "Group or user does not exist.\n";
    }
}

void displayAllUsers() {
    for (auto& i : mapUserName) {
        cout << "Username: " << i.first << ", Name: " << i.second.firstName << " " << i.second.lastName << endl;
    }
}

void displayAllFriendships() {
    for (auto& i : Friends) {
        cout << i.first << ": ";
        for (auto& j : i.second) {
            cout << j << " ";
        }
        cout << endl;
    }
}

void displayMenu() {
    cout << "\nMenu:\n";
    cout << "1. Add User\n";
    cout << "2. Make Friends\n";
    cout << "3. Send Message\n";
    cout << "4. Create Group\n";
    cout << "5. Add Member to Group\n";
    cout << "6. Display Users\n";
    cout << "7. Display Friendships\n";
    cout << "8. Exit\n";
    cout << "Enter your choice: ";
}

int main() {
    int choice;
    do {
        displayMenu();
        cin >> choice;
        switch (choice) {
            case 1: {
                string username, firstName, lastName, gender;
                int age;
                cout << "Enter username: ";
                cin >> username;
                cout << "Enter first name: ";
                cin >> firstName;
                cout << "Enter last name: ";
                cin >> lastName;
                cout << "Enter age: ";
                cin >> age;
                cout << "Enter gender: ";
                cin >> gender;
                addUser(username, User(firstName, lastName, age, gender));
                break;
            }
            case 2: {
                string userName1, userName2;
                cout << "Enter the first username: ";
                cin >> userName1;
                cout << "Enter the second username: ";
                cin >> userName2;
                makeThemFriend(userName1, userName2);
                break;
            }
            case 3: {
                string sender, receiver, content;
                cout << "Enter sender username: ";
                cin >> sender;
                cout << "Enter receiver username: ";
                cin >> receiver;
                cout << "Enter message content: ";
                cin.ignore();
                getline(cin, content);
                sendMessage(sender, receiver, content);
                break;
            }
            case 4: {
                string groupName;
                cout << "Enter group name: ";
                cin >> groupName;
                createGroup(groupName);
                break;
            }
            case 5: {
                string groupName, userName;
                cout << "Enter group name: ";
                cin >> groupName;
                cout << "Enter username to add: ";
                cin >> userName;
                addMemberToGroup(groupName, userName);
                break;
            }
            case 6: {
                displayAllUsers();
                break;
            }
            case 7: {
                displayAllFriendships();
                break;
            }
            case 8: {
                cout << "Exiting...\n";
                break;
            }
            default: {
                cout << "Invalid choice. Try again.\n";
            }
        }
    } while (choice != 8);

    return 0;
}
